// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="SOPDetect,hls_ip_2017_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu095-ffva2104-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.723250,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=6,HLS_SYN_LUT=521}" *)

module SOPDetect (
        ap_clk,
        ap_rst,
        enable,
        TDATAin_V,
        Thresholdin_V,
        SOP_detected,
        SOP_detected_ap_vld,
        Packet_detected,
        Packet_detected_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   enable;
input  [31:0] TDATAin_V;
input  [7:0] Thresholdin_V;
output   SOP_detected;
output   SOP_detected_ap_vld;
output   Packet_detected;
output   Packet_detected_ap_vld;

reg SOP_detected;
reg SOP_detected_ap_vld;
reg Packet_detected_ap_vld;

reg   [0:0] SOP_reg;
reg   [3:0] NumConsequtiveNoData;
reg   [0:0] ap_phi_mux_storemerge_phi_fu_154_p4;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] enable_read_read_fu_130_p2;
wire   [0:0] SOP_reg_load_1_fu_927_p2;
wire   [0:0] SOP_reg_new_1_fu_921_p2;
wire   [0:0] SOP_reg_flag_1_fu_915_p2;
wire   [3:0] NumConsequtiveNoData_2_fu_972_p3;
wire   [0:0] NumConsequtiveNoData_1_fu_966_p2;
wire   [0:0] p_not_s_fu_868_p2;
wire   [0:0] tmp_5_fu_166_p1;
wire   [0:0] tmp_6_fu_174_p3;
wire   [0:0] tmp_7_fu_186_p3;
wire   [0:0] tmp_8_fu_198_p3;
wire   [0:0] tmp_9_fu_210_p3;
wire   [0:0] tmp_10_fu_222_p3;
wire   [0:0] tmp_11_fu_234_p3;
wire   [0:0] tmp_12_fu_246_p3;
wire   [0:0] tmp_13_fu_258_p3;
wire   [0:0] tmp_14_fu_270_p3;
wire   [0:0] tmp_15_fu_282_p3;
wire   [0:0] tmp_16_fu_294_p3;
wire   [0:0] tmp_17_fu_306_p3;
wire   [0:0] tmp_18_fu_318_p3;
wire   [0:0] tmp_19_fu_330_p3;
wire   [0:0] tmp_20_fu_342_p3;
wire   [0:0] tmp_21_fu_354_p3;
wire   [0:0] tmp_22_fu_366_p3;
wire   [0:0] tmp_23_fu_378_p3;
wire   [0:0] tmp_24_fu_390_p3;
wire   [0:0] tmp_25_fu_402_p3;
wire   [0:0] tmp_26_fu_414_p3;
wire   [0:0] tmp_27_fu_426_p3;
wire   [0:0] tmp_28_fu_438_p3;
wire   [0:0] tmp_29_fu_450_p3;
wire   [0:0] tmp_30_fu_462_p3;
wire   [0:0] tmp_31_fu_474_p3;
wire   [0:0] tmp_32_fu_486_p3;
wire   [0:0] tmp_33_fu_498_p3;
wire   [0:0] tmp_34_fu_510_p3;
wire   [0:0] tmp_35_fu_522_p3;
wire   [0:0] tmp_36_fu_534_p3;
wire   [1:0] tmp_30_cast_fu_530_p1;
wire   [1:0] tmp_29_cast_fu_518_p1;
wire   [1:0] tmp_fu_546_p2;
wire   [1:0] tmp_27_cast_fu_494_p1;
wire   [1:0] tmp_28_cast_fu_506_p1;
wire   [1:0] tmp1_fu_556_p2;
wire   [2:0] tmp34_cast_fu_552_p1;
wire   [2:0] tmp35_cast_fu_562_p1;
wire   [2:0] tmp2_fu_566_p2;
wire   [1:0] tmp_23_cast_fu_446_p1;
wire   [1:0] tmp_24_cast_fu_458_p1;
wire   [1:0] tmp3_fu_576_p2;
wire   [1:0] tmp_25_cast_fu_470_p1;
wire   [1:0] tmp_26_cast_fu_482_p1;
wire   [1:0] tmp4_fu_586_p2;
wire   [2:0] tmp37_cast_fu_582_p1;
wire   [2:0] tmp38_cast_fu_592_p1;
wire   [2:0] tmp5_fu_596_p2;
wire   [3:0] tmp33_cast_fu_572_p1;
wire   [3:0] tmp36_cast_fu_602_p1;
wire   [3:0] tmp6_fu_606_p2;
wire   [1:0] tmp_15_cast_fu_350_p1;
wire   [1:0] tmp_16_cast_fu_362_p1;
wire   [1:0] tmp7_fu_616_p2;
wire   [1:0] tmp_17_cast_fu_374_p1;
wire   [1:0] tmp_18_cast_fu_386_p1;
wire   [1:0] tmp8_fu_626_p2;
wire   [2:0] tmp41_cast_fu_622_p1;
wire   [2:0] tmp42_cast_fu_632_p1;
wire   [2:0] tmp9_fu_636_p2;
wire   [1:0] tmp_19_cast_fu_398_p1;
wire   [1:0] tmp_20_cast_fu_410_p1;
wire   [1:0] tmp10_fu_646_p2;
wire   [1:0] tmp_21_cast_fu_422_p1;
wire   [1:0] tmp_22_cast_fu_434_p1;
wire   [1:0] tmp11_fu_656_p2;
wire   [2:0] tmp44_cast_fu_652_p1;
wire   [2:0] tmp45_cast_fu_662_p1;
wire   [2:0] tmp12_fu_666_p2;
wire   [3:0] tmp40_cast_fu_642_p1;
wire   [3:0] tmp43_cast_fu_672_p1;
wire   [3:0] tmp13_fu_676_p2;
wire   [4:0] tmp32_cast_fu_612_p1;
wire   [4:0] tmp39_cast_fu_682_p1;
wire   [4:0] tmp14_fu_686_p2;
wire   [1:0] tmp_2_cast_fu_194_p1;
wire   [1:0] tmp_cast_fu_170_p1;
wire   [1:0] tmp15_fu_696_p2;
wire   [1:0] tmp_4_cast_fu_218_p1;
wire   [1:0] tmp_1_cast_fu_182_p1;
wire   [1:0] tmp16_fu_706_p2;
wire   [2:0] tmp49_cast_fu_702_p1;
wire   [2:0] tmp50_cast_fu_712_p1;
wire   [2:0] tmp17_fu_716_p2;
wire   [1:0] tmp_6_cast_fu_242_p1;
wire   [1:0] tmp_3_cast_fu_206_p1;
wire   [1:0] tmp18_fu_726_p2;
wire   [1:0] tmp_8_cast_fu_266_p1;
wire   [1:0] tmp_5_cast_fu_230_p1;
wire   [1:0] tmp19_fu_736_p2;
wire   [2:0] tmp52_cast_fu_732_p1;
wire   [2:0] tmp53_cast_fu_742_p1;
wire   [2:0] tmp20_fu_746_p2;
wire   [3:0] tmp48_cast_fu_722_p1;
wire   [3:0] tmp51_cast_fu_752_p1;
wire   [3:0] tmp21_fu_756_p2;
wire   [1:0] tmp_10_cast_fu_290_p1;
wire   [1:0] tmp_7_cast_fu_254_p1;
wire   [1:0] tmp22_fu_766_p2;
wire   [1:0] tmp_12_cast_fu_314_p1;
wire   [1:0] tmp_9_cast_fu_278_p1;
wire   [1:0] tmp23_fu_776_p2;
wire   [2:0] tmp56_cast_fu_772_p1;
wire   [2:0] tmp57_cast_fu_782_p1;
wire   [2:0] tmp24_fu_786_p2;
wire   [1:0] tmp_14_cast_fu_338_p1;
wire   [1:0] tmp_11_cast_fu_302_p1;
wire   [1:0] tmp25_fu_796_p2;
wire   [1:0] tmp_31_cast_fu_542_p1;
wire   [1:0] tmp_13_cast_fu_326_p1;
wire   [1:0] tmp26_fu_806_p2;
wire   [2:0] tmp59_cast_fu_802_p1;
wire   [2:0] tmp60_cast_fu_812_p1;
wire   [2:0] tmp27_fu_816_p2;
wire   [3:0] tmp55_cast_fu_792_p1;
wire   [3:0] tmp58_cast_fu_822_p1;
wire   [3:0] tmp28_fu_826_p2;
wire   [4:0] tmp47_cast_fu_762_p1;
wire   [4:0] tmp54_cast_fu_832_p1;
wire   [4:0] tmp29_fu_836_p2;
wire   [5:0] tmp31_cast_fu_692_p1;
wire   [5:0] tmp46_cast_fu_842_p1;
wire   [5:0] reg_numones_V_fu_846_p2;
wire   [7:0] reg_numones_V_cast_fu_852_p1;
wire   [0:0] tmp_s_fu_856_p2;
wire   [0:0] p_not_demorgan_fu_862_p2;
wire   [0:0] not_tmp_s_fu_875_p2;
wire   [3:0] tmp_2_fu_897_p2;
wire   [0:0] tmp_1_fu_887_p2;
wire   [0:0] tmp_3_fu_903_p2;
wire   [0:0] p_SOP_reg_flag_fu_909_p2;
wire   [0:0] SOP_reg_load_7_fu_881_p2;
wire   [8:0] lhs_V_cast_fu_934_p1;
wire   [8:0] tmp_65_cast_fu_944_p1;
wire   [8:0] r_V_fu_938_p2;
wire   [0:0] tmp_4_fu_948_p2;
wire   [0:0] not_tmp_2_fu_960_p2;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 SOP_reg = 1'd0;
#0 NumConsequtiveNoData = 4'd0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        NumConsequtiveNoData <= 4'd0;
    end else begin
        if (((1'd1 == NumConsequtiveNoData_1_fu_966_p2) & (enable_read_read_fu_130_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            NumConsequtiveNoData <= NumConsequtiveNoData_2_fu_972_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        SOP_reg <= 1'd0;
    end else begin
        if (((1'd1 == SOP_reg_flag_1_fu_915_p2) & (enable_read_read_fu_130_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            SOP_reg <= SOP_reg_new_1_fu_921_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        Packet_detected_ap_vld = 1'b1;
    end else begin
        Packet_detected_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((enable_read_read_fu_130_p2 == 1'd1)) begin
            SOP_detected = p_not_s_fu_868_p2;
        end else if ((1'd0 == enable_read_read_fu_130_p2)) begin
            SOP_detected = 1'd0;
        end else begin
            SOP_detected = 'bx;
        end
    end else begin
        SOP_detected = 'bx;
    end
end

always @ (*) begin
    if ((((enable_read_read_fu_130_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state1) & (1'd0 == enable_read_read_fu_130_p2)))) begin
        SOP_detected_ap_vld = 1'b1;
    end else begin
        SOP_detected_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((enable_read_read_fu_130_p2 == 1'd1)) begin
            ap_phi_mux_storemerge_phi_fu_154_p4 = SOP_reg_load_1_fu_927_p2;
        end else if ((1'd0 == enable_read_read_fu_130_p2)) begin
            ap_phi_mux_storemerge_phi_fu_154_p4 = 1'd0;
        end else begin
            ap_phi_mux_storemerge_phi_fu_154_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_storemerge_phi_fu_154_p4 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign NumConsequtiveNoData_1_fu_966_p2 = (tmp_1_fu_887_p2 | not_tmp_2_fu_960_p2);

assign NumConsequtiveNoData_2_fu_972_p3 = ((tmp_4_fu_948_p2[0:0] === 1'b1) ? tmp_2_fu_897_p2 : 4'd0);

assign Packet_detected = ap_phi_mux_storemerge_phi_fu_154_p4;

assign SOP_reg_flag_1_fu_915_p2 = (p_SOP_reg_flag_fu_909_p2 | not_tmp_s_fu_875_p2);

assign SOP_reg_load_1_fu_927_p2 = (SOP_reg_new_1_fu_921_p2 & SOP_reg_load_7_fu_881_p2);

assign SOP_reg_load_7_fu_881_p2 = (not_tmp_s_fu_875_p2 | SOP_reg);

assign SOP_reg_new_1_fu_921_p2 = (p_SOP_reg_flag_fu_909_p2 ^ 1'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign enable_read_read_fu_130_p2 = enable;

assign lhs_V_cast_fu_934_p1 = Thresholdin_V;

assign not_tmp_2_fu_960_p2 = (tmp_4_fu_948_p2 ^ 1'd1);

assign not_tmp_s_fu_875_p2 = (tmp_s_fu_856_p2 ^ 1'd1);

assign p_SOP_reg_flag_fu_909_p2 = (tmp_3_fu_903_p2 & tmp_1_fu_887_p2);

assign p_not_demorgan_fu_862_p2 = (tmp_s_fu_856_p2 | SOP_reg);

assign p_not_s_fu_868_p2 = (p_not_demorgan_fu_862_p2 ^ 1'd1);

assign r_V_fu_938_p2 = ($signed(9'd509) + $signed(lhs_V_cast_fu_934_p1));

assign reg_numones_V_cast_fu_852_p1 = reg_numones_V_fu_846_p2;

assign reg_numones_V_fu_846_p2 = (tmp31_cast_fu_692_p1 + tmp46_cast_fu_842_p1);

assign tmp10_fu_646_p2 = (tmp_19_cast_fu_398_p1 + tmp_20_cast_fu_410_p1);

assign tmp11_fu_656_p2 = (tmp_21_cast_fu_422_p1 + tmp_22_cast_fu_434_p1);

assign tmp12_fu_666_p2 = (tmp44_cast_fu_652_p1 + tmp45_cast_fu_662_p1);

assign tmp13_fu_676_p2 = (tmp40_cast_fu_642_p1 + tmp43_cast_fu_672_p1);

assign tmp14_fu_686_p2 = (tmp32_cast_fu_612_p1 + tmp39_cast_fu_682_p1);

assign tmp15_fu_696_p2 = (tmp_2_cast_fu_194_p1 + tmp_cast_fu_170_p1);

assign tmp16_fu_706_p2 = (tmp_4_cast_fu_218_p1 + tmp_1_cast_fu_182_p1);

assign tmp17_fu_716_p2 = (tmp49_cast_fu_702_p1 + tmp50_cast_fu_712_p1);

assign tmp18_fu_726_p2 = (tmp_6_cast_fu_242_p1 + tmp_3_cast_fu_206_p1);

assign tmp19_fu_736_p2 = (tmp_8_cast_fu_266_p1 + tmp_5_cast_fu_230_p1);

assign tmp1_fu_556_p2 = (tmp_27_cast_fu_494_p1 + tmp_28_cast_fu_506_p1);

assign tmp20_fu_746_p2 = (tmp52_cast_fu_732_p1 + tmp53_cast_fu_742_p1);

assign tmp21_fu_756_p2 = (tmp48_cast_fu_722_p1 + tmp51_cast_fu_752_p1);

assign tmp22_fu_766_p2 = (tmp_10_cast_fu_290_p1 + tmp_7_cast_fu_254_p1);

assign tmp23_fu_776_p2 = (tmp_12_cast_fu_314_p1 + tmp_9_cast_fu_278_p1);

assign tmp24_fu_786_p2 = (tmp56_cast_fu_772_p1 + tmp57_cast_fu_782_p1);

assign tmp25_fu_796_p2 = (tmp_14_cast_fu_338_p1 + tmp_11_cast_fu_302_p1);

assign tmp26_fu_806_p2 = (tmp_31_cast_fu_542_p1 + tmp_13_cast_fu_326_p1);

assign tmp27_fu_816_p2 = (tmp59_cast_fu_802_p1 + tmp60_cast_fu_812_p1);

assign tmp28_fu_826_p2 = (tmp55_cast_fu_792_p1 + tmp58_cast_fu_822_p1);

assign tmp29_fu_836_p2 = (tmp47_cast_fu_762_p1 + tmp54_cast_fu_832_p1);

assign tmp2_fu_566_p2 = (tmp34_cast_fu_552_p1 + tmp35_cast_fu_562_p1);

assign tmp31_cast_fu_692_p1 = tmp14_fu_686_p2;

assign tmp32_cast_fu_612_p1 = tmp6_fu_606_p2;

assign tmp33_cast_fu_572_p1 = tmp2_fu_566_p2;

assign tmp34_cast_fu_552_p1 = tmp_fu_546_p2;

assign tmp35_cast_fu_562_p1 = tmp1_fu_556_p2;

assign tmp36_cast_fu_602_p1 = tmp5_fu_596_p2;

assign tmp37_cast_fu_582_p1 = tmp3_fu_576_p2;

assign tmp38_cast_fu_592_p1 = tmp4_fu_586_p2;

assign tmp39_cast_fu_682_p1 = tmp13_fu_676_p2;

assign tmp3_fu_576_p2 = (tmp_23_cast_fu_446_p1 + tmp_24_cast_fu_458_p1);

assign tmp40_cast_fu_642_p1 = tmp9_fu_636_p2;

assign tmp41_cast_fu_622_p1 = tmp7_fu_616_p2;

assign tmp42_cast_fu_632_p1 = tmp8_fu_626_p2;

assign tmp43_cast_fu_672_p1 = tmp12_fu_666_p2;

assign tmp44_cast_fu_652_p1 = tmp10_fu_646_p2;

assign tmp45_cast_fu_662_p1 = tmp11_fu_656_p2;

assign tmp46_cast_fu_842_p1 = tmp29_fu_836_p2;

assign tmp47_cast_fu_762_p1 = tmp21_fu_756_p2;

assign tmp48_cast_fu_722_p1 = tmp17_fu_716_p2;

assign tmp49_cast_fu_702_p1 = tmp15_fu_696_p2;

assign tmp4_fu_586_p2 = (tmp_25_cast_fu_470_p1 + tmp_26_cast_fu_482_p1);

assign tmp50_cast_fu_712_p1 = tmp16_fu_706_p2;

assign tmp51_cast_fu_752_p1 = tmp20_fu_746_p2;

assign tmp52_cast_fu_732_p1 = tmp18_fu_726_p2;

assign tmp53_cast_fu_742_p1 = tmp19_fu_736_p2;

assign tmp54_cast_fu_832_p1 = tmp28_fu_826_p2;

assign tmp55_cast_fu_792_p1 = tmp24_fu_786_p2;

assign tmp56_cast_fu_772_p1 = tmp22_fu_766_p2;

assign tmp57_cast_fu_782_p1 = tmp23_fu_776_p2;

assign tmp58_cast_fu_822_p1 = tmp27_fu_816_p2;

assign tmp59_cast_fu_802_p1 = tmp25_fu_796_p2;

assign tmp5_fu_596_p2 = (tmp37_cast_fu_582_p1 + tmp38_cast_fu_592_p1);

assign tmp60_cast_fu_812_p1 = tmp26_fu_806_p2;

assign tmp6_fu_606_p2 = (tmp33_cast_fu_572_p1 + tmp36_cast_fu_602_p1);

assign tmp7_fu_616_p2 = (tmp_15_cast_fu_350_p1 + tmp_16_cast_fu_362_p1);

assign tmp8_fu_626_p2 = (tmp_17_cast_fu_374_p1 + tmp_18_cast_fu_386_p1);

assign tmp9_fu_636_p2 = (tmp41_cast_fu_622_p1 + tmp42_cast_fu_632_p1);

assign tmp_10_cast_fu_290_p1 = tmp_15_fu_282_p3;

assign tmp_10_fu_222_p3 = TDATAin_V[32'd5];

assign tmp_11_cast_fu_302_p1 = tmp_16_fu_294_p3;

assign tmp_11_fu_234_p3 = TDATAin_V[32'd6];

assign tmp_12_cast_fu_314_p1 = tmp_17_fu_306_p3;

assign tmp_12_fu_246_p3 = TDATAin_V[32'd7];

assign tmp_13_cast_fu_326_p1 = tmp_18_fu_318_p3;

assign tmp_13_fu_258_p3 = TDATAin_V[32'd8];

assign tmp_14_cast_fu_338_p1 = tmp_19_fu_330_p3;

assign tmp_14_fu_270_p3 = TDATAin_V[32'd9];

assign tmp_15_cast_fu_350_p1 = tmp_20_fu_342_p3;

assign tmp_15_fu_282_p3 = TDATAin_V[32'd10];

assign tmp_16_cast_fu_362_p1 = tmp_21_fu_354_p3;

assign tmp_16_fu_294_p3 = TDATAin_V[32'd11];

assign tmp_17_cast_fu_374_p1 = tmp_22_fu_366_p3;

assign tmp_17_fu_306_p3 = TDATAin_V[32'd12];

assign tmp_18_cast_fu_386_p1 = tmp_23_fu_378_p3;

assign tmp_18_fu_318_p3 = TDATAin_V[32'd13];

assign tmp_19_cast_fu_398_p1 = tmp_24_fu_390_p3;

assign tmp_19_fu_330_p3 = TDATAin_V[32'd14];

assign tmp_1_cast_fu_182_p1 = tmp_6_fu_174_p3;

assign tmp_1_fu_887_p2 = ((reg_numones_V_fu_846_p2 == 6'd0) ? 1'b1 : 1'b0);

assign tmp_20_cast_fu_410_p1 = tmp_25_fu_402_p3;

assign tmp_20_fu_342_p3 = TDATAin_V[32'd15];

assign tmp_21_cast_fu_422_p1 = tmp_26_fu_414_p3;

assign tmp_21_fu_354_p3 = TDATAin_V[32'd16];

assign tmp_22_cast_fu_434_p1 = tmp_27_fu_426_p3;

assign tmp_22_fu_366_p3 = TDATAin_V[32'd17];

assign tmp_23_cast_fu_446_p1 = tmp_28_fu_438_p3;

assign tmp_23_fu_378_p3 = TDATAin_V[32'd18];

assign tmp_24_cast_fu_458_p1 = tmp_29_fu_450_p3;

assign tmp_24_fu_390_p3 = TDATAin_V[32'd19];

assign tmp_25_cast_fu_470_p1 = tmp_30_fu_462_p3;

assign tmp_25_fu_402_p3 = TDATAin_V[32'd20];

assign tmp_26_cast_fu_482_p1 = tmp_31_fu_474_p3;

assign tmp_26_fu_414_p3 = TDATAin_V[32'd21];

assign tmp_27_cast_fu_494_p1 = tmp_32_fu_486_p3;

assign tmp_27_fu_426_p3 = TDATAin_V[32'd22];

assign tmp_28_cast_fu_506_p1 = tmp_33_fu_498_p3;

assign tmp_28_fu_438_p3 = TDATAin_V[32'd23];

assign tmp_29_cast_fu_518_p1 = tmp_34_fu_510_p3;

assign tmp_29_fu_450_p3 = TDATAin_V[32'd24];

assign tmp_2_cast_fu_194_p1 = tmp_7_fu_186_p3;

assign tmp_2_fu_897_p2 = (4'd1 + NumConsequtiveNoData);

assign tmp_30_cast_fu_530_p1 = tmp_35_fu_522_p3;

assign tmp_30_fu_462_p3 = TDATAin_V[32'd25];

assign tmp_31_cast_fu_542_p1 = tmp_36_fu_534_p3;

assign tmp_31_fu_474_p3 = TDATAin_V[32'd26];

assign tmp_32_fu_486_p3 = TDATAin_V[32'd27];

assign tmp_33_fu_498_p3 = TDATAin_V[32'd28];

assign tmp_34_fu_510_p3 = TDATAin_V[32'd29];

assign tmp_35_fu_522_p3 = TDATAin_V[32'd30];

assign tmp_36_fu_534_p3 = TDATAin_V[32'd31];

assign tmp_3_cast_fu_206_p1 = tmp_8_fu_198_p3;

assign tmp_3_fu_903_p2 = ((tmp_2_fu_897_p2 > 4'd9) ? 1'b1 : 1'b0);

assign tmp_4_cast_fu_218_p1 = tmp_9_fu_210_p3;

assign tmp_4_fu_948_p2 = (($signed(tmp_65_cast_fu_944_p1) < $signed(r_V_fu_938_p2)) ? 1'b1 : 1'b0);

assign tmp_5_cast_fu_230_p1 = tmp_10_fu_222_p3;

assign tmp_5_fu_166_p1 = TDATAin_V[0:0];

assign tmp_65_cast_fu_944_p1 = reg_numones_V_fu_846_p2;

assign tmp_6_cast_fu_242_p1 = tmp_11_fu_234_p3;

assign tmp_6_fu_174_p3 = TDATAin_V[32'd1];

assign tmp_7_cast_fu_254_p1 = tmp_12_fu_246_p3;

assign tmp_7_fu_186_p3 = TDATAin_V[32'd2];

assign tmp_8_cast_fu_266_p1 = tmp_13_fu_258_p3;

assign tmp_8_fu_198_p3 = TDATAin_V[32'd3];

assign tmp_9_cast_fu_278_p1 = tmp_14_fu_270_p3;

assign tmp_9_fu_210_p3 = TDATAin_V[32'd4];

assign tmp_cast_fu_170_p1 = tmp_5_fu_166_p1;

assign tmp_fu_546_p2 = (tmp_30_cast_fu_530_p1 + tmp_29_cast_fu_518_p1);

assign tmp_s_fu_856_p2 = ((reg_numones_V_cast_fu_852_p1 < Thresholdin_V) ? 1'b1 : 1'b0);

endmodule //SOPDetect
