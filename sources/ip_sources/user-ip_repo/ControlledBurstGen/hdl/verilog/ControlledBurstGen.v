// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ControlledBurstGen,hls_ip_2017_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu095-ffva2104-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.721000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=67,HLS_SYN_LUT=489}" *)

module ControlledBurstGen (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        enable,
        preamble_length,
        add_delimiter,
        preamble,
        delimiter,
        burst_length,
        burst_period,
        dataOut_TDATA,
        dataOut_TVALID,
        dataOut_TREADY,
        dataOut_TKEEP,
        dataOut_TSTRB,
        dataOut_TUSER,
        dataOut_TLAST,
        dataOut_TID,
        dataOut_TDEST,
        axis_dataOut_TVALID,
        axis_dataOut_TVALID_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   enable;
input  [31:0] preamble_length;
input   add_delimiter;
input  [31:0] preamble;
input  [31:0] delimiter;
input  [31:0] burst_length;
input  [31:0] burst_period;
output  [31:0] dataOut_TDATA;
output   dataOut_TVALID;
input   dataOut_TREADY;
output  [3:0] dataOut_TKEEP;
output  [3:0] dataOut_TSTRB;
output  [1:0] dataOut_TUSER;
output  [0:0] dataOut_TLAST;
output  [4:0] dataOut_TID;
output  [5:0] dataOut_TDEST;
output   axis_dataOut_TVALID;
output   axis_dataOut_TVALID_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] dataOut_TDATA;
reg dataOut_TVALID;
reg[0:0] dataOut_TLAST;
reg axis_dataOut_TVALID;
reg axis_dataOut_TVALID_ap_vld;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] data_count;
reg   [31:0] init_data;
reg    dataOut_TDATA_blk_n;
wire   [0:0] enable_read_read_fu_114_p2;
wire   [0:0] tmp_1_fu_191_p2;
wire   [0:0] tmp_3_fu_221_p2;
wire   [0:0] tmp_4_fu_239_p2;
wire   [0:0] demorgan_fu_251_p2;
wire   [0:0] tmp_5_fu_227_p2;
reg    ap_sig_ioackin_dataOut_TREADY;
reg    ap_predicate_op36_write_state1;
reg    ap_predicate_op47_write_state1;
reg    ap_predicate_op55_write_state1;
reg    ap_predicate_op67_write_state1;
reg    ap_predicate_op71_write_state1;
reg    ap_predicate_op75_write_state1;
reg    ap_block_state1_io;
wire   [31:0] tmp_9_fu_257_p2;
wire   [31:0] grp_fu_164_p2;
wire   [0:0] tmp_8_fu_233_p2;
reg    ap_reg_ioackin_axis_dataOut_TVALID_dummy_ack;
wire   [31:0] grp_fu_175_p2;
reg    ap_reg_ioackin_dataOut_TREADY;
wire   [31:0] tmp_fu_185_p2;
wire   [31:0] tmp_2_fu_215_p2;
wire   [0:0] p_not_fu_245_p2;
wire   [0:0] demorgan_fu_251_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_condition_113;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 data_count = 32'd0;
#0 init_data = 32'd0;
#0 ap_reg_ioackin_axis_dataOut_TVALID_dummy_ack = 1'b0;
#0 ap_reg_ioackin_dataOut_TREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_axis_dataOut_TVALID_dummy_ack <= 1'b0;
    end else begin
        if (((~((1'b0 == ap_start) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op55_write_state1)) | (~((1'b0 == ap_start) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op47_write_state1)) | (~((1'b0 == ap_start) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op36_write_state1)) | (~((1'b0 == ap_start) | (1'b1 == ap_block_state1_io)) & (tmp_4_fu_239_p2 == 1'd0) & (1'd1 == tmp_3_fu_221_p2) & (1'd1 == tmp_1_fu_191_p2) & (enable_read_read_fu_114_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | (~((1'b0 == ap_start) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op75_write_state1)))) begin
            ap_reg_ioackin_axis_dataOut_TVALID_dummy_ack <= 1'b0;
        end else if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == 1'b1) & (1'b1 == ap_predicate_op55_write_state1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == 1'b1) & (1'b1 == ap_predicate_op47_write_state1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == 1'b1) & (1'b1 == ap_predicate_op36_write_state1)) | ((ap_start == 1'b1) & (tmp_4_fu_239_p2 == 1'd0) & (1'd1 == tmp_3_fu_221_p2) & (1'd1 == tmp_1_fu_191_p2) & (enable_read_read_fu_114_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == 1'b1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == 1'b1) & (1'b1 == ap_predicate_op75_write_state1)))) begin
            ap_reg_ioackin_axis_dataOut_TVALID_dummy_ack <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_dataOut_TREADY <= 1'b0;
    end else begin
        if (((~((1'b0 == ap_start) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op67_write_state1)) | (~((1'b0 == ap_start) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op55_write_state1)) | (~((1'b0 == ap_start) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op47_write_state1)) | (~((1'b0 == ap_start) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op36_write_state1)) | (~((1'b0 == ap_start) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op75_write_state1)) | (~((1'b0 == ap_start) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op71_write_state1)))) begin
            ap_reg_ioackin_dataOut_TREADY <= 1'b0;
        end else if ((((ap_start == 1'b1) & (1'b1 == dataOut_TREADY) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op67_write_state1)) | ((ap_start == 1'b1) & (1'b1 == dataOut_TREADY) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op55_write_state1)) | ((ap_start == 1'b1) & (1'b1 == dataOut_TREADY) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op47_write_state1)) | ((ap_start == 1'b1) & (1'b1 == dataOut_TREADY) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op36_write_state1)) | ((ap_start == 1'b1) & (1'b1 == dataOut_TREADY) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op75_write_state1)) | ((ap_start == 1'b1) & (1'b1 == dataOut_TREADY) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op71_write_state1)))) begin
            ap_reg_ioackin_dataOut_TREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_count <= 32'd0;
    end else begin
        if ((ap_condition_113 == 1'b1)) begin
            if (((1'd1 == tmp_1_fu_191_p2) & (enable_read_read_fu_114_p2 == 1'd1))) begin
                data_count <= tmp_9_fu_257_p2;
            end else if ((1'b1 == ap_predicate_op36_write_state1)) begin
                data_count <= 32'd0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        init_data <= 32'd0;
    end else begin
        if (((~((1'b0 == ap_start) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op67_write_state1)) | (~((1'b0 == ap_start) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op55_write_state1)) | (~((1'b0 == ap_start) | (1'b1 == ap_block_state1_io)) & (1'd0 == tmp_5_fu_227_p2) & (tmp_3_fu_221_p2 == 1'd0) & (1'd1 == tmp_1_fu_191_p2) & (1'd1 == tmp_8_fu_233_p2) & (enable_read_read_fu_114_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
            init_data <= grp_fu_164_p2;
        end else if ((~((1'b0 == ap_start) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op36_write_state1))) begin
            init_data <= 32'd0;
        end
    end
end

always @ (*) begin
    if ((~((1'b0 == ap_start) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == ap_start) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_dataOut_TREADY)) begin
        ap_sig_ioackin_dataOut_TREADY = dataOut_TREADY;
    end else begin
        ap_sig_ioackin_dataOut_TREADY = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op55_write_state1)) | ((ap_start == 1'b1) & (tmp_4_fu_239_p2 == 1'd0) & (1'd1 == tmp_3_fu_221_p2) & (1'd1 == tmp_1_fu_191_p2) & (enable_read_read_fu_114_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op75_write_state1)))) begin
        axis_dataOut_TVALID = 1'd1;
    end else if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op47_write_state1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op36_write_state1)))) begin
        axis_dataOut_TVALID = 1'd0;
    end else begin
        axis_dataOut_TVALID = 'bx;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b0 == ap_reg_ioackin_axis_dataOut_TVALID_dummy_ack) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op55_write_state1)) | ((ap_start == 1'b1) & (1'b0 == ap_reg_ioackin_axis_dataOut_TVALID_dummy_ack) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op47_write_state1)) | ((ap_start == 1'b1) & (1'b0 == ap_reg_ioackin_axis_dataOut_TVALID_dummy_ack) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op36_write_state1)) | ((ap_start == 1'b1) & (tmp_4_fu_239_p2 == 1'd0) & (1'd1 == tmp_3_fu_221_p2) & (1'd1 == tmp_1_fu_191_p2) & (enable_read_read_fu_114_p2 == 1'd1) & (1'b0 == ap_reg_ioackin_axis_dataOut_TVALID_dummy_ack) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (1'b0 == ap_reg_ioackin_axis_dataOut_TVALID_dummy_ack) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op75_write_state1)))) begin
        axis_dataOut_TVALID_ap_vld = 1'b1;
    end else begin
        axis_dataOut_TVALID_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op75_write_state1))) begin
        dataOut_TDATA = preamble;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op71_write_state1))) begin
        dataOut_TDATA = delimiter;
    end else if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op67_write_state1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op55_write_state1)))) begin
        dataOut_TDATA = grp_fu_175_p2;
    end else if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op47_write_state1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op36_write_state1)))) begin
        dataOut_TDATA = 32'd0;
    end else begin
        dataOut_TDATA = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_1_fu_191_p2 == 1'd0) & (enable_read_read_fu_114_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((1'd0 == tmp_5_fu_227_p2) & (tmp_3_fu_221_p2 == 1'd0) & (1'd1 == tmp_1_fu_191_p2) & (enable_read_read_fu_114_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_3_fu_221_p2 == 1'd0) & (1'd1 == tmp_5_fu_227_p2) & (1'd1 == tmp_1_fu_191_p2) & (enable_read_read_fu_114_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((1'd0 == demorgan_fu_251_p2) & (tmp_4_fu_239_p2 == 1'd0) & (1'd1 == tmp_3_fu_221_p2) & (1'd1 == tmp_1_fu_191_p2) & (enable_read_read_fu_114_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_4_fu_239_p2 == 1'd0) & (1'd1 == demorgan_fu_251_p2) & (1'd1 == tmp_3_fu_221_p2) & (1'd1 == tmp_1_fu_191_p2) & (enable_read_read_fu_114_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((1'd1 == tmp_4_fu_239_p2) & (1'd1 == tmp_3_fu_221_p2) & (1'd1 == tmp_1_fu_191_p2) & (enable_read_read_fu_114_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        dataOut_TDATA_blk_n = dataOut_TREADY;
    end else begin
        dataOut_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op55_write_state1))) begin
        dataOut_TLAST = 1'd1;
    end else if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op67_write_state1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op47_write_state1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op36_write_state1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op75_write_state1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op71_write_state1)))) begin
        dataOut_TLAST = 1'd0;
    end else begin
        dataOut_TLAST = 'bx;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b0 == ap_reg_ioackin_dataOut_TREADY) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op67_write_state1)) | ((ap_start == 1'b1) & (1'b0 == ap_reg_ioackin_dataOut_TREADY) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op55_write_state1)) | ((ap_start == 1'b1) & (1'b0 == ap_reg_ioackin_dataOut_TREADY) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op47_write_state1)) | ((ap_start == 1'b1) & (1'b0 == ap_reg_ioackin_dataOut_TREADY) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op36_write_state1)) | ((ap_start == 1'b1) & (1'b0 == ap_reg_ioackin_dataOut_TREADY) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op75_write_state1)) | ((ap_start == 1'b1) & (1'b0 == ap_reg_ioackin_dataOut_TREADY) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_predicate_op71_write_state1)))) begin
        dataOut_TVALID = 1'b1;
    end else begin
        dataOut_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_io = (((1'b0 == ap_sig_ioackin_dataOut_TREADY) & (1'b1 == ap_predicate_op67_write_state1)) | ((1'b0 == ap_sig_ioackin_dataOut_TREADY) & (1'b1 == ap_predicate_op55_write_state1)) | ((1'b0 == ap_sig_ioackin_dataOut_TREADY) & (1'b1 == ap_predicate_op47_write_state1)) | ((1'b0 == ap_sig_ioackin_dataOut_TREADY) & (1'b1 == ap_predicate_op36_write_state1)) | ((1'b0 == ap_sig_ioackin_dataOut_TREADY) & (1'b1 == ap_predicate_op75_write_state1)) | ((1'b0 == ap_sig_ioackin_dataOut_TREADY) & (1'b1 == ap_predicate_op71_write_state1)));
end

always @ (*) begin
    ap_condition_113 = (~((1'b0 == ap_start) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1));
end

always @ (*) begin
    ap_predicate_op36_write_state1 = ((tmp_1_fu_191_p2 == 1'd0) & (enable_read_read_fu_114_p2 == 1'd1));
end

always @ (*) begin
    ap_predicate_op47_write_state1 = ((1'd0 == tmp_5_fu_227_p2) & (tmp_3_fu_221_p2 == 1'd0) & (1'd1 == tmp_1_fu_191_p2) & (enable_read_read_fu_114_p2 == 1'd1));
end

always @ (*) begin
    ap_predicate_op55_write_state1 = ((tmp_3_fu_221_p2 == 1'd0) & (1'd1 == tmp_5_fu_227_p2) & (1'd1 == tmp_1_fu_191_p2) & (enable_read_read_fu_114_p2 == 1'd1));
end

always @ (*) begin
    ap_predicate_op67_write_state1 = ((1'd0 == demorgan_fu_251_p2) & (tmp_4_fu_239_p2 == 1'd0) & (1'd1 == tmp_3_fu_221_p2) & (1'd1 == tmp_1_fu_191_p2) & (enable_read_read_fu_114_p2 == 1'd1));
end

always @ (*) begin
    ap_predicate_op71_write_state1 = ((tmp_4_fu_239_p2 == 1'd0) & (1'd1 == demorgan_fu_251_p2) & (1'd1 == tmp_3_fu_221_p2) & (1'd1 == tmp_1_fu_191_p2) & (enable_read_read_fu_114_p2 == 1'd1));
end

always @ (*) begin
    ap_predicate_op75_write_state1 = ((1'd1 == tmp_4_fu_239_p2) & (1'd1 == tmp_3_fu_221_p2) & (1'd1 == tmp_1_fu_191_p2) & (enable_read_read_fu_114_p2 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign dataOut_TDEST = 6'd0;

assign dataOut_TID = 5'd0;

assign dataOut_TKEEP = 4'd15;

assign dataOut_TSTRB = 4'd0;

assign dataOut_TUSER = 2'd0;

assign demorgan_fu_251_p1 = add_delimiter;

assign demorgan_fu_251_p2 = (p_not_fu_245_p2 & demorgan_fu_251_p1);

assign enable_read_read_fu_114_p2 = enable;

assign grp_fu_164_p2 = (init_data + 32'd1);

assign grp_fu_175_p2 = (init_data ^ 32'd2913688236);

assign p_not_fu_245_p2 = ((data_count == preamble_length) ? 1'b1 : 1'b0);

assign tmp_1_fu_191_p2 = ((data_count < tmp_fu_185_p2) ? 1'b1 : 1'b0);

assign tmp_2_fu_215_p2 = ($signed(burst_length) + $signed(32'd4294967295));

assign tmp_3_fu_221_p2 = ((data_count < tmp_2_fu_215_p2) ? 1'b1 : 1'b0);

assign tmp_4_fu_239_p2 = ((data_count < preamble_length) ? 1'b1 : 1'b0);

assign tmp_5_fu_227_p2 = ((data_count == tmp_2_fu_215_p2) ? 1'b1 : 1'b0);

assign tmp_8_fu_233_p2 = ((data_count == burst_length) ? 1'b1 : 1'b0);

assign tmp_9_fu_257_p2 = (data_count + 32'd1);

assign tmp_fu_185_p2 = ($signed(burst_period) + $signed(32'd4294967295));

endmodule //ControlledBurstGen
