#*****************************************************************************************
# Vivado (TM) v2017.3 (64-bit)
#
# recreate_project.tcl: Tcl script for re-creating project '10G_eth_FMC_GTH'
#
# Generated by Vivado on Sun Oct 18 20:29:29 +0100 2020
# IP Build 2016188 on Wed Oct  4 21:52:56 MDT 2017
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (recreate_project.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/projects/10G_eth_FMC_GTH/10G_eth_FMC_GTH.srcs/sources_1/bd/Sys_Ctrl/hdl/Sys_Ctrl_wrapper.v"
#
# 3. The following remote source files that were added to the original project:-
#
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/ip_sources/BCDR/GTY/BCDR_QuickLock.dcp"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/ip_sources/vio/vio.xci"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/ip_sources/gth_eth_10G_gtbnk230_x0y27_gt/gth_eth_10G_gtbnk230_x0y27_gt.xci"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/ip_sources/gth_eth_10G_gtbnk230_x0y24_gt/gth_eth_10G_gtbnk230_x0y24_gt.xci"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/AXIS_RxGateway.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/Axis_fifo_rw_control.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/Burst_Mode_Synchronizer.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/FMC_GTH_top.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/GTH_core_init_seq.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/GTH_eth_10G_emulator.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/GTH_eth_10G_to_XG_PON.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/PRBS_Generator.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/add_XG_PON_header.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/axis_ms_slv_loopback.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/bit_sync.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/eth_10G_gtbnk230_x0y24_core_support.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/eth_10G_gtbnk230_x0y24_gt_wrapper.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/eth_10G_gtbnk230_x0y24_top.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/eth_10G_gtbnk230_x0y24_ultrascale_rx_userclk.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/eth_10G_gtbnk230_x0y24_ultrascale_tx_userclk.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/eth_10G_gtbnk230_x0y25_core_support.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/eth_10G_gtbnk230_x0y25_gt_wrapper.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/eth_10G_gtbnk230_x0y25_top.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/eth_10G_gtbnk230_x0y25_ultrascale_rx_userclk.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/eth_10G_gtbnk230_x0y25_ultrascale_tx_userclk.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/eth_10G_gtbnk230_x0y27_core_support.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/eth_10G_gtbnk230_x0y27_gt_wrapper.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/eth_10G_gtbnk230_x0y27_top.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/eth_10G_gtbnk230_x0y27_ultrascale_rx_userclk.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/eth_10G_gtbnk230_x0y27_ultrascale_tx_userclk.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/eth_10G_pkt_gen_mon.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/eth_10G_trans_debug.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/gth_eth_10G_gtbnk230_x0y24_clocking_wrapper.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/gth_gtbnk230_common_wrapper.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/gth_gtbnk230_reset_wrapper.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/gth_gtbnk230_sharedlogic_wrapper.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/gty_BCDR_gt_wrapper.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/reset_sync.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/vio_top_wrapper.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/vio_wrapper.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/xg_PON_frame_sync.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/xxv_ethernet_0_pkt_gen_mon.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/xxv_ethernet_0_trans_debug.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/top.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/FMC_GTH_BCDR_gtbnk230_x0y26_wrapper.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/pon_sources/AXIS_TxGateway.v"
#    "e:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/ip_sources/FMC_gth_BCDR_gtbnk230_x0y26_gt/FMC_gth_BCDR_gtbnk230_x0y26_gt.xci"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/ip_sources/variableDelay/variableDelay.xci"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/ip_sources/axis_master_slave_lb_fifo/axis_master_slave_lb_fifo.xci"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/ip_sources/axis_ila/axis_ila.xci"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/ip_sources/vio_top/vio_top.xci"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/ip_sources/gty_BCDR/gty_BCDR.xci"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/ip_sources/standard_rw_fifo/standard_rw_fifo.xci"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/ip_sources/gth_eth_10G_gtbnk230_x0y25/gth_eth_10G_gtbnk230_x0y25.xci"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/ip_sources/gth_eth_10G_gtbnk230_x0y25_gt/gth_eth_10G_gtbnk230_x0y25_gt.xci"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/ip_sources/gth_eth_10G_gtbnk230_x0y27/gth_eth_10G_gtbnk230_x0y27.xci"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/ip_sources/gth_eth_10G_gtbnk230_x0y24/gth_eth_10G_gtbnk230_x0y24.xci"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/ip_sources/ControlledBurstGen_0/ControlledBurstGen_0.xci"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/ip_sources/ControlledBurstCheck_0/ControlledBurstCheck_0.xci"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/ip_sources/error_accumulator/error_accumulator.xci"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/constraints/GTH_eth_10G_to_XG_PON_if.xdc"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/constraints/ila_Debug.xdc"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/sim_sources/BCDR_QuickLock.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/sim_sources/FMC_GTH_10G_top_tb.v"
#    "E:/WorkingDir/axi_eth_10g_to_PON_FMC_GTH/sources/sim_sources/top_tb_behav.wcfg"
#
#*****************************************************************************************

# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set project_name "10G_eth_FMC_GTH_BCDR_DFE"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set project_name $::user_project_name
}

variable script_file
set script_file "recreate_project.tcl"

# Help information for this script
proc help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < [llength $::argc]} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set project_name [lindex $::argv $i] }
      "--help"         { help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/../projects/10G_eth_FMC_GTH"]"

# Create project
create_project ${project_name} ../projects/${project_name} -part xcvu095-ffva2104-2-e

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Reconstruct message rules
# None

# Set project properties
set obj [current_project]
set_property -name "board_part" -value "xilinx.com:vcu108:part0:1.3" -objects $obj
set_property -name "corecontainer.enable" -value "1" -objects $obj
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${project_name}.cache/ip" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "xpm_libraries" -value "XPM_CDC XPM_MEMORY" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set IP repository paths
set obj [get_filesets sources_1]
set_property "ip_repo_paths" "[file normalize "$origin_dir/../sources/ip_sources/user-ip_repo"]" $obj

# Rebuild user ip_repo's index before adding any source files
update_ip_catalog -rebuild

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 "[file normalize "$origin_dir/../sources/ip_sources/vio/vio.xci"]"\
 "[file normalize "$origin_dir/../sources/ip_sources/gth_eth_10G_gtbnk230_x0y24/gth_eth_10G_gtbnk230_x0y24.xci"]"\
 "[file normalize "$origin_dir/../sources/ip_sources/gth_eth_10G_gtbnk230_x0y24_gt/gth_eth_10G_gtbnk230_x0y24_gt.xci"]"\
 "[file normalize "$origin_dir/../sources/ip_sources/gth_eth_10G_gtbnk230_x0y25/gth_eth_10G_gtbnk230_x0y25.xci"]"\
 "[file normalize "$origin_dir/../sources/ip_sources/gth_eth_10G_gtbnk230_x0y25_gt/gth_eth_10G_gtbnk230_x0y25_gt.xci"]"\
 "[file normalize "$origin_dir/../sources/ip_sources/gth_eth_10G_gtbnk230_x0y27/gth_eth_10G_gtbnk230_x0y27.xci"]"\
 "[file normalize "$origin_dir/../sources/ip_sources/gth_eth_10G_gtbnk230_x0y27_gt/gth_eth_10G_gtbnk230_x0y27_gt.xci"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/AXIS_RxGateway.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/Axis_fifo_rw_control.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/Burst_Mode_Synchronizer.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/GTH_core_init_seq.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/GTH_eth_10G_emulator.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/GTH_eth_10G_to_XG_PON.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/PRBS_Generator.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/add_XG_PON_header.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/axis_ms_slv_loopback.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/bit_sync.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/eth_10G_gtbnk230_x0y24_core_support.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/eth_10G_gtbnk230_x0y24_gt_wrapper.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/eth_10G_gtbnk230_x0y24_top.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/eth_10G_gtbnk230_x0y24_ultrascale_rx_userclk.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/eth_10G_gtbnk230_x0y24_ultrascale_tx_userclk.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/eth_10G_gtbnk230_x0y25_core_support.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/eth_10G_gtbnk230_x0y25_gt_wrapper.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/eth_10G_gtbnk230_x0y25_top.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/eth_10G_gtbnk230_x0y25_ultrascale_rx_userclk.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/eth_10G_gtbnk230_x0y25_ultrascale_tx_userclk.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/eth_10G_gtbnk230_x0y27_core_support.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/eth_10G_gtbnk230_x0y27_gt_wrapper.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/eth_10G_gtbnk230_x0y27_top.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/eth_10G_gtbnk230_x0y27_ultrascale_rx_userclk.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/eth_10G_gtbnk230_x0y27_ultrascale_tx_userclk.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/eth_10G_pkt_gen_mon.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/eth_10G_trans_debug.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/gth_eth_10G_gtbnk230_x0y24_clocking_wrapper.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/gth_gtbnk230_common_wrapper.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/gth_gtbnk230_reset_wrapper.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/gth_gtbnk230_sharedlogic_wrapper.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/reset_sync.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/vio_top_wrapper.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/vio_wrapper.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/xg_PON_frame_sync.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/xxv_ethernet_0_pkt_gen_mon.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/xxv_ethernet_0_trans_debug.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/top.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/AXIS_TxGateway.v"]"\
 "[file normalize "$origin_dir/../sources/ip_sources/variableDelay/variableDelay.xci"]"\
 "[file normalize "$origin_dir/../sources/ip_sources/axis_master_slave_lb_fifo/axis_master_slave_lb_fifo.xci"]"\
 "[file normalize "$origin_dir/../sources/ip_sources/axis_ila/axis_ila.xci"]"\
 "[file normalize "$origin_dir/../sources/ip_sources/vio_top/vio_top.xci"]"\
 "[file normalize "$origin_dir/../sources/ip_sources/standard_rw_fifo/standard_rw_fifo.xci"]"\
 "[file normalize "$origin_dir/../sources/ip_sources/ControlledBurstGen_0/ControlledBurstGen_0.xci"]"\
 "[file normalize "$origin_dir/../sources/ip_sources/ControlledBurstCheck_0/ControlledBurstCheck_0.xci"]"\
 "[file normalize "$origin_dir/../sources/ip_sources/error_accumulator/error_accumulator.xci"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/Xg_PON_if_gth.v"]"\
 "[file normalize "$origin_dir/../sources/pon_sources/FMC_GTH_BCDR_gtbnk230_x0y26_DFE_wrapper.v"]"\
 "[file normalize "$origin_dir/../sources/ip_sources/FMC_gth_BCDR_gtbnk230_x0y26_DFE/FMC_gth_BCDR_gtbnk230_x0y26_DFE.xci"]"\
 "[file normalize "$origin_dir/../sources/ip_sources/BCDR/GTH/BCDR_QuickLock.dcp"]"\
]
add_files -norecurse -fileset $obj $files

# "[file normalize "$origin_dir/../constraints/GTH_eth_10G_to_XG_PON_if.xdc"
# "[file normalize "$origin_dir/../constraints/ila_Debug.xdc"
# "[file normalize "$origin_dir/../sources/sim_sources/BCDR_QuickLock.v"
# "[file normalize "$origin_dir/../sources/sim_sources/FMC_GTH_10G_top_tb.v"
# "[file normalize "$origin_dir/../sources/sim_sources/top_tb_behav.wcfg"


# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/../sources/ip_sources/gth_eth_10G_gtbnk230_x0y27_gt/gth_eth_10G_gtbnk230_x0y27_gt.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "generate_synth_checkpoint" -value "0" -objects $file_obj
}

set file "$origin_dir/../sources/ip_sources/gth_eth_10G_gtbnk230_x0y24_gt/gth_eth_10G_gtbnk230_x0y24_gt.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "generate_synth_checkpoint" -value "0" -objects $file_obj
}

set file "$origin_dir/../sources/pon_sources/AXIS_TxGateway.v"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "is_enabled" -value "0" -objects $file_obj


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "top" -value "top" -objects $obj



# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/../constraints/GTH_eth_10G_to_XG_PON_GTH_DFE.xdc"]"
set file_added [add_files -norecurse -fileset $obj $file]
set file "$origin_dir/../constraints/GTH_eth_10G_to_XG_PON_GTH_DFE.xdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/../constraints/ila_Debug.xdc"]"
set file_added [add_files -norecurse -fileset $obj $file]
set file "$origin_dir/../constraints/ila_Debug.xdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj
set_property -name "is_enabled" -value "0" -objects $file_obj

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
set files [list \
 "[file normalize "$origin_dir/../sources/sim_sources/BCDR_QuickLock.v"]"\
 "[file normalize "$origin_dir/../sources/sim_sources/FMC_GTH_10G_top_tb.v"]"\
 "[file normalize "$origin_dir/../sources/sim_sources/top_tb_behav.wcfg"]"\
]
add_files -norecurse -fileset $obj $files

# Set 'sim_1' fileset file properties for remote files
# None

# Set 'sim_1' fileset file properties for local files
# None

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "top" -value "top_tb" -objects $obj


# Adding sources referenced in BDs, if not already added


# Proc to create BD Sys_Ctrl
proc cr_bd_Sys_Ctrl { parentCell } {

  # CHANGE DESIGN NAME HERE
  set design_name Sys_Ctrl

  common::send_msg_id "BD_TCL-003" "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  xilinx.com:ip:axi_iic:2.0\
  xilinx.com:ip:clk_wiz:5.4\
  xilinx.com:ip:mdm:3.2\
  xilinx.com:ip:microblaze:10.0\
  xilinx.com:ip:proc_sys_reset:5.0\
  xilinx.com:ip:lmb_bram_if_cntlr:4.0\
  xilinx.com:ip:lmb_v10:3.0\
  xilinx.com:ip:blk_mem_gen:8.4\
  "

   set list_ips_missing ""
   common::send_msg_id "BD_TCL-006" "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_msg_id "BD_TCL-115" "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  if { $bCheckIPsPassed != 1 } {
    common::send_msg_id "BD_TCL-1003" "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  
# Hierarchical cell: microblaze_0_local_memory
proc create_hier_cell_microblaze_0_local_memory { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_msg_id "BD_TCL-102" "ERROR" "create_hier_cell_microblaze_0_local_memory() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode MirroredMaster -vlnv xilinx.com:interface:lmb_rtl:1.0 DLMB
  create_bd_intf_pin -mode MirroredMaster -vlnv xilinx.com:interface:lmb_rtl:1.0 ILMB

  # Create pins
  create_bd_pin -dir I -type clk LMB_Clk
  create_bd_pin -dir I -type rst SYS_Rst

  # Create instance: dlmb_bram_if_cntlr, and set properties
  set dlmb_bram_if_cntlr [ create_bd_cell -type ip -vlnv xilinx.com:ip:lmb_bram_if_cntlr:4.0 dlmb_bram_if_cntlr ]
  set_property -dict [ list \
   CONFIG.C_ECC {0} \
 ] $dlmb_bram_if_cntlr

  # Create instance: dlmb_v10, and set properties
  set dlmb_v10 [ create_bd_cell -type ip -vlnv xilinx.com:ip:lmb_v10:3.0 dlmb_v10 ]

  # Create instance: ilmb_bram_if_cntlr, and set properties
  set ilmb_bram_if_cntlr [ create_bd_cell -type ip -vlnv xilinx.com:ip:lmb_bram_if_cntlr:4.0 ilmb_bram_if_cntlr ]
  set_property -dict [ list \
   CONFIG.C_ECC {0} \
 ] $ilmb_bram_if_cntlr

  # Create instance: ilmb_v10, and set properties
  set ilmb_v10 [ create_bd_cell -type ip -vlnv xilinx.com:ip:lmb_v10:3.0 ilmb_v10 ]

  # Create instance: lmb_bram, and set properties
  set lmb_bram [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 lmb_bram ]
  set_property -dict [ list \
   CONFIG.Memory_Type {True_Dual_Port_RAM} \
   CONFIG.use_bram_block {BRAM_Controller} \
 ] $lmb_bram

  # Create interface connections
  connect_bd_intf_net -intf_net microblaze_0_dlmb [get_bd_intf_pins DLMB] [get_bd_intf_pins dlmb_v10/LMB_M]
  connect_bd_intf_net -intf_net microblaze_0_dlmb_bus [get_bd_intf_pins dlmb_bram_if_cntlr/SLMB] [get_bd_intf_pins dlmb_v10/LMB_Sl_0]
  connect_bd_intf_net -intf_net microblaze_0_dlmb_cntlr [get_bd_intf_pins dlmb_bram_if_cntlr/BRAM_PORT] [get_bd_intf_pins lmb_bram/BRAM_PORTA]
  connect_bd_intf_net -intf_net microblaze_0_ilmb [get_bd_intf_pins ILMB] [get_bd_intf_pins ilmb_v10/LMB_M]
  connect_bd_intf_net -intf_net microblaze_0_ilmb_bus [get_bd_intf_pins ilmb_bram_if_cntlr/SLMB] [get_bd_intf_pins ilmb_v10/LMB_Sl_0]
  connect_bd_intf_net -intf_net microblaze_0_ilmb_cntlr [get_bd_intf_pins ilmb_bram_if_cntlr/BRAM_PORT] [get_bd_intf_pins lmb_bram/BRAM_PORTB]

  # Create port connections
  connect_bd_net -net SYS_Rst_1 [get_bd_pins SYS_Rst] [get_bd_pins dlmb_bram_if_cntlr/LMB_Rst] [get_bd_pins dlmb_v10/SYS_Rst] [get_bd_pins ilmb_bram_if_cntlr/LMB_Rst] [get_bd_pins ilmb_v10/SYS_Rst]
  connect_bd_net -net microblaze_0_Clk [get_bd_pins LMB_Clk] [get_bd_pins dlmb_bram_if_cntlr/LMB_Clk] [get_bd_pins dlmb_v10/LMB_Clk] [get_bd_pins ilmb_bram_if_cntlr/LMB_Clk] [get_bd_pins ilmb_v10/LMB_Clk]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports
  set iic_fmc_hpc0_osc0 [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:iic_rtl:1.0 iic_fmc_hpc0_osc0 ]
  set iic_fmc_hpc0_osc1 [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:iic_rtl:1.0 iic_fmc_hpc0_osc1 ]
  set iic_fmc_hpc0_sfp0 [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:iic_rtl:1.0 iic_fmc_hpc0_sfp0 ]
  set iic_main [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:iic_rtl:1.0 iic_main ]

  # Create ports
  set Microblaze_sys_clk_in [ create_bd_port -dir I -type clk Microblaze_sys_clk_in ]
  set_property -dict [ list \
   CONFIG.FREQ_HZ {100000000} \
 ] $Microblaze_sys_clk_in
  set reset [ create_bd_port -dir I -type rst reset ]
  set_property -dict [ list \
   CONFIG.POLARITY {ACTIVE_HIGH} \
 ] $reset

  # Create instance: axi_iic_fmc_hpc0_osc_0, and set properties
  set axi_iic_fmc_hpc0_osc_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_iic:2.0 axi_iic_fmc_hpc0_osc_0 ]
  set_property -dict [ list \
   CONFIG.IIC_BOARD_INTERFACE {Custom} \
   CONFIG.USE_BOARD_FLOW {true} \
 ] $axi_iic_fmc_hpc0_osc_0

  # Create instance: axi_iic_fmc_hpc0_osc_1, and set properties
  set axi_iic_fmc_hpc0_osc_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_iic:2.0 axi_iic_fmc_hpc0_osc_1 ]
  set_property -dict [ list \
   CONFIG.IIC_BOARD_INTERFACE {Custom} \
   CONFIG.USE_BOARD_FLOW {true} \
 ] $axi_iic_fmc_hpc0_osc_1

  # Create instance: axi_iic_fmc_hpc0_sfp0, and set properties
  set axi_iic_fmc_hpc0_sfp0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_iic:2.0 axi_iic_fmc_hpc0_sfp0 ]
  set_property -dict [ list \
   CONFIG.IIC_BOARD_INTERFACE {Custom} \
   CONFIG.USE_BOARD_FLOW {true} \
 ] $axi_iic_fmc_hpc0_sfp0

  # Create instance: axi_iic_main, and set properties
  set axi_iic_main [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_iic:2.0 axi_iic_main ]
  set_property -dict [ list \
   CONFIG.IIC_BOARD_INTERFACE {iic_main} \
   CONFIG.USE_BOARD_FLOW {true} \
 ] $axi_iic_main

  # Create instance: clk_wiz_1, and set properties
  set clk_wiz_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:clk_wiz:5.4 clk_wiz_1 ]
  set_property -dict [ list \
   CONFIG.CLKIN1_JITTER_PS {100.0} \
   CONFIG.CLKOUT1_JITTER {130.958} \
   CONFIG.CLKOUT1_PHASE_ERROR {98.575} \
   CONFIG.CLK_IN1_BOARD_INTERFACE {Custom} \
   CONFIG.MMCM_CLKFBOUT_MULT_F {10.000} \
   CONFIG.MMCM_CLKIN1_PERIOD {10.000} \
   CONFIG.MMCM_CLKIN2_PERIOD {10.000} \
   CONFIG.MMCM_DIVCLK_DIVIDE {1} \
   CONFIG.OVERRIDE_MMCM {false} \
   CONFIG.PRIM_IN_FREQ {100.00} \
   CONFIG.PRIM_SOURCE {Global_buffer} \
   CONFIG.RESET_BOARD_INTERFACE {reset} \
   CONFIG.USE_BOARD_FLOW {true} \
 ] $clk_wiz_1

  # Create instance: mdm_1, and set properties
  set mdm_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:mdm:3.2 mdm_1 ]
  set_property -dict [ list \
   CONFIG.C_USE_UART {1} \
 ] $mdm_1

  # Create instance: microblaze_0, and set properties
  set microblaze_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:microblaze:10.0 microblaze_0 ]
  set_property -dict [ list \
   CONFIG.C_DEBUG_ENABLED {1} \
   CONFIG.C_D_AXI {1} \
   CONFIG.C_D_LMB {1} \
   CONFIG.C_I_LMB {1} \
 ] $microblaze_0

  # Create instance: microblaze_0_axi_periph, and set properties
  set microblaze_0_axi_periph [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:2.1 microblaze_0_axi_periph ]
  set_property -dict [ list \
   CONFIG.NUM_MI {5} \
 ] $microblaze_0_axi_periph

  # Create instance: microblaze_0_local_memory
  create_hier_cell_microblaze_0_local_memory [current_bd_instance .] microblaze_0_local_memory

  # Create instance: rst_clk_wiz_1_100M, and set properties
  set rst_clk_wiz_1_100M [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset:5.0 rst_clk_wiz_1_100M ]
  set_property -dict [ list \
   CONFIG.RESET_BOARD_INTERFACE {reset} \
   CONFIG.USE_BOARD_FLOW {true} \
 ] $rst_clk_wiz_1_100M

  # Create interface connections
  connect_bd_intf_net -intf_net axi_iic_0_IIC [get_bd_intf_ports iic_main] [get_bd_intf_pins axi_iic_main/IIC]
  connect_bd_intf_net -intf_net axi_iic_0_IIC1 [get_bd_intf_ports iic_fmc_hpc0_osc1] [get_bd_intf_pins axi_iic_fmc_hpc0_osc_1/IIC]
  connect_bd_intf_net -intf_net axi_iic_0_IIC2 [get_bd_intf_ports iic_fmc_hpc0_osc0] [get_bd_intf_pins axi_iic_fmc_hpc0_osc_0/IIC]
  connect_bd_intf_net -intf_net axi_iic_0_IIC3 [get_bd_intf_ports iic_fmc_hpc0_sfp0] [get_bd_intf_pins axi_iic_fmc_hpc0_sfp0/IIC]
  connect_bd_intf_net -intf_net microblaze_0_axi_dp [get_bd_intf_pins microblaze_0/M_AXI_DP] [get_bd_intf_pins microblaze_0_axi_periph/S00_AXI]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M01_AXI [get_bd_intf_pins axi_iic_main/S_AXI] [get_bd_intf_pins microblaze_0_axi_periph/M01_AXI]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M02_AXI [get_bd_intf_pins axi_iic_fmc_hpc0_osc_1/S_AXI] [get_bd_intf_pins microblaze_0_axi_periph/M02_AXI]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M03_AXI [get_bd_intf_pins axi_iic_fmc_hpc0_osc_0/S_AXI] [get_bd_intf_pins microblaze_0_axi_periph/M03_AXI]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M04_AXI [get_bd_intf_pins axi_iic_fmc_hpc0_sfp0/S_AXI] [get_bd_intf_pins microblaze_0_axi_periph/M04_AXI]
  connect_bd_intf_net -intf_net microblaze_0_debug [get_bd_intf_pins mdm_1/MBDEBUG_0] [get_bd_intf_pins microblaze_0/DEBUG]
  connect_bd_intf_net -intf_net microblaze_0_dlmb_1 [get_bd_intf_pins microblaze_0/DLMB] [get_bd_intf_pins microblaze_0_local_memory/DLMB]
  connect_bd_intf_net -intf_net microblaze_0_ilmb_1 [get_bd_intf_pins microblaze_0/ILMB] [get_bd_intf_pins microblaze_0_local_memory/ILMB]
  connect_bd_intf_net -intf_net microblaze_0_mdm_axi [get_bd_intf_pins mdm_1/S_AXI] [get_bd_intf_pins microblaze_0_axi_periph/M00_AXI]

  # Create port connections
  connect_bd_net -net clk_100MHz_1 [get_bd_ports Microblaze_sys_clk_in] [get_bd_pins clk_wiz_1/clk_in1]
  connect_bd_net -net clk_wiz_1_locked [get_bd_pins clk_wiz_1/locked] [get_bd_pins rst_clk_wiz_1_100M/dcm_locked]
  connect_bd_net -net mdm_1_debug_sys_rst [get_bd_pins mdm_1/Debug_SYS_Rst] [get_bd_pins rst_clk_wiz_1_100M/mb_debug_sys_rst]
  connect_bd_net -net microblaze_0_Clk [get_bd_pins axi_iic_fmc_hpc0_osc_0/s_axi_aclk] [get_bd_pins axi_iic_fmc_hpc0_osc_1/s_axi_aclk] [get_bd_pins axi_iic_fmc_hpc0_sfp0/s_axi_aclk] [get_bd_pins axi_iic_main/s_axi_aclk] [get_bd_pins clk_wiz_1/clk_out1] [get_bd_pins mdm_1/S_AXI_ACLK] [get_bd_pins microblaze_0/Clk] [get_bd_pins microblaze_0_axi_periph/ACLK] [get_bd_pins microblaze_0_axi_periph/M00_ACLK] [get_bd_pins microblaze_0_axi_periph/M01_ACLK] [get_bd_pins microblaze_0_axi_periph/M02_ACLK] [get_bd_pins microblaze_0_axi_periph/M03_ACLK] [get_bd_pins microblaze_0_axi_periph/M04_ACLK] [get_bd_pins microblaze_0_axi_periph/S00_ACLK] [get_bd_pins microblaze_0_local_memory/LMB_Clk] [get_bd_pins rst_clk_wiz_1_100M/slowest_sync_clk]
  connect_bd_net -net reset_1 [get_bd_ports reset] [get_bd_pins clk_wiz_1/reset] [get_bd_pins rst_clk_wiz_1_100M/ext_reset_in]
  connect_bd_net -net rst_clk_wiz_1_100M_bus_struct_reset [get_bd_pins microblaze_0_local_memory/SYS_Rst] [get_bd_pins rst_clk_wiz_1_100M/bus_struct_reset]
  connect_bd_net -net rst_clk_wiz_1_100M_interconnect_aresetn [get_bd_pins microblaze_0_axi_periph/ARESETN] [get_bd_pins rst_clk_wiz_1_100M/interconnect_aresetn]
  connect_bd_net -net rst_clk_wiz_1_100M_mb_reset [get_bd_pins microblaze_0/Reset] [get_bd_pins rst_clk_wiz_1_100M/mb_reset]
  connect_bd_net -net rst_clk_wiz_1_100M_peripheral_aresetn [get_bd_pins axi_iic_fmc_hpc0_osc_0/s_axi_aresetn] [get_bd_pins axi_iic_fmc_hpc0_osc_1/s_axi_aresetn] [get_bd_pins axi_iic_fmc_hpc0_sfp0/s_axi_aresetn] [get_bd_pins axi_iic_main/s_axi_aresetn] [get_bd_pins mdm_1/S_AXI_ARESETN] [get_bd_pins microblaze_0_axi_periph/M00_ARESETN] [get_bd_pins microblaze_0_axi_periph/M01_ARESETN] [get_bd_pins microblaze_0_axi_periph/M02_ARESETN] [get_bd_pins microblaze_0_axi_periph/M03_ARESETN] [get_bd_pins microblaze_0_axi_periph/M04_ARESETN] [get_bd_pins microblaze_0_axi_periph/S00_ARESETN] [get_bd_pins rst_clk_wiz_1_100M/peripheral_aresetn]

  # Create address segments
  create_bd_addr_seg -range 0x00010000 -offset 0x40800000 [get_bd_addr_spaces microblaze_0/Data] [get_bd_addr_segs axi_iic_main/S_AXI/Reg] SEG_axi_iic_0_Reg
  create_bd_addr_seg -range 0x00010000 -offset 0x40810000 [get_bd_addr_spaces microblaze_0/Data] [get_bd_addr_segs axi_iic_fmc_hpc0_osc_1/S_AXI/Reg] SEG_axi_iic_0_Reg1
  create_bd_addr_seg -range 0x00010000 -offset 0x40820000 [get_bd_addr_spaces microblaze_0/Data] [get_bd_addr_segs axi_iic_fmc_hpc0_osc_0/S_AXI/Reg] SEG_axi_iic_0_Reg2
  create_bd_addr_seg -range 0x00010000 -offset 0x40830000 [get_bd_addr_spaces microblaze_0/Data] [get_bd_addr_segs axi_iic_fmc_hpc0_sfp0/S_AXI/Reg] SEG_axi_iic_0_Reg3
  create_bd_addr_seg -range 0x00020000 -offset 0x00000000 [get_bd_addr_spaces microblaze_0/Data] [get_bd_addr_segs microblaze_0_local_memory/dlmb_bram_if_cntlr/SLMB/Mem] SEG_dlmb_bram_if_cntlr_Mem
  create_bd_addr_seg -range 0x00020000 -offset 0x00000000 [get_bd_addr_spaces microblaze_0/Instruction] [get_bd_addr_segs microblaze_0_local_memory/ilmb_bram_if_cntlr/SLMB/Mem] SEG_ilmb_bram_if_cntlr_Mem
  create_bd_addr_seg -range 0x00001000 -offset 0x41400000 [get_bd_addr_spaces microblaze_0/Data] [get_bd_addr_segs mdm_1/S_AXI/Reg] SEG_mdm_1_Reg


  # Restore current instance
  current_bd_instance $oldCurInst

  save_bd_design
  close_bd_design $design_name 
}
# End of cr_bd_Sys_Ctrl()
cr_bd_Sys_Ctrl ""
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files Sys_Ctrl.bd ]

update_compile_order -fileset sources_1
make_wrapper -files [get_files ${proj_dir}/${project_name}.srcs/sources_1/bd/Sys_Ctrl/Sys_Ctrl.bd] -top
add_files -norecurse ${proj_dir}/${project_name}.srcs/sources_1/bd/Sys_Ctrl/hdl/Sys_Ctrl_wrapper.v
update_compile_order -fileset sources_1


# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
  create_run -name synth_1 -part xcvu095-ffva2104-2-e -flow {Vivado Synthesis 2017} -strategy "Vivado Synthesis Defaults" -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2017" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property -name "needs_refresh" -value "1" -objects $obj
set_property -name "report_strategy" -value "Vivado Synthesis Default Reports" -objects $obj
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj
set_property -name "steps.synth_design.args.flatten_hierarchy" -value "none" -objects $obj

set reports [get_report_configs -of_objects $obj]
if { [llength $reports ] > 0 } {
  delete_report_config [get_report_configs -of_objects $obj]
}
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
  create_run -name impl_1 -part xcvu095-ffva2104-2-e -flow {Vivado Implementation 2017} -strategy "Vivado Implementation Defaults" -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
  set_property flow "Vivado Implementation 2017" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property -name "needs_refresh" -value "1" -objects $obj
set_property -name "report_strategy" -value "Vivado Implementation Default Reports" -objects $obj
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

set reports [get_report_configs -of_objects $obj]
if { [llength $reports ] > 0 } {
  delete_report_config [get_report_configs -of_objects $obj]
}
# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {

}
# set the current impl run
current_run -implementation [get_runs impl_1]

puts "INFO: Project created:$project_name"

#** Do not run the synthesis and implementation commands this part onwards if you wish to inspect the sources and generate the bitstream from GUI mode
#** disable this part of synthesis and impl commands if creating the project from running the tcl file and if you want to run the synthesis in gui mode

#** Instead Start the GUI (disable this if you want to do everything in non-gui mode, (runs faster))"
if(1){
	start_gui
}else{
	#** Run synthesis
	puts "#####*********************************************##########"
	puts "#####********INFO: Running Synthesis**************##########"
	puts "#####*********************************************##########"
	reset_run synth_1
	launch_runs synth_1 -jobs 4

	#** Run Implementation
	puts "Wait till the synthesis run finishes its job"
	wait_on_run synth_1
	puts "Check if the synthesis run finished properly"
	if {[get_property PROGRESS [get_runs synth_1]] != "100%"} {
	 error "ERROR: synth_1 failed"
	} 
	puts "#####*********************************************##########"
	puts "#####********INFO: Running Implementation*********##########"
	puts "#####*********************************************##########"
	launch_runs impl_1 -to_step write_bitstream -jobs 4

	#** Export the Generated Bitstream and hardware files in SDK worspace
	#** create the SDK workspace if not alrready available
	puts "Wait till the Generate Bitstream run finishes its job"
	wait_on_run impl_1
	puts "Check if the Generate Bitstream run finished properly"
	if {[get_property PROGRESS [get_runs impl_1]] != "100%"} {
	 error "ERROR: Generate Bitstream rum failed"
	}

	puts "#####*******************************************************************##########"
	puts "#####***********INFO: Running Export Hardware and Launch SDK***********##########"
	puts "#####*******************************************************************##########"
	update_compile_order -fileset sources_1
	file mkdir ${proj_dir}/${project_name}.sdk

	#** Export the hardware files and include the bitstream. (current hw de file is top.sysdef)
	file copy -force ${proj_dir}/${project_name}.runs/impl_1/top.sysdef ${proj_dir}/${project_name}.sdk/top.hdf

	#Launch SDK

	launch_sdk -workspace ${proj_dir}/${project_name}.sdk -hwspec ${proj_dir}/${project_name}.sdk/top.hdf

	puts "#####********************************************************************************************##########"
	puts "#####****Please complete the following process to complete the creation of the sw application****##########"
	puts "#####********************************************************************************************##########"

	puts "Once the DK is launched the sdk project creation cannot be automated using tcl"

	puts "Follow the below instruction to recreate the SDK project"

	puts "1. create a blank xilinx software application project (make sure to use the exported hardware platform). Use new bsp option"

	puts "For this project, I used project name as iic_sys_ctrl and the bsp file was created as iic_sys_ctrl_bsp. the hardware platform name was top_hw_platform_0"

	puts "once the project is created, add all the software files from the sources/sw_sources/ directory."

	puts "to do this, right click on the src of the procject on the SDK->import files->General->Filesystem and then provide the directory to import those files."

	puts "The project might build automatically once import is done. Generate linker script and followed be give it another build using ctrl+b shortcut"

	puts "Check if everything finishes OK without any error, Enjoy!!" 
}